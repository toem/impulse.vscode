{
  "name": "jx",
  "scopeName": "source.jx",
  "fileTypes": ["jx"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#this-calls"
    },
    {
      "include": "#method-calls"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.jx",
          "match": "//.*$"
        },
        {
          "name": "comment.block.jx",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.jx",
          "match": "\\b(if|else|while|for|do|switch|case|default|break|continue|return)\\b"
        },
        {
          "name": "keyword.other.jx",
          "match": "\\b(var|let|const|null|true|false)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.other.jx",
          "match": "\\b(ISample\\.[A-Z_]+|ISamples\\.[A-Z_]+|TimeBase\\.[a-z]+)\\b"
        },
        {
          "name": "constant.language.jx",
          "match": "\\b(null|true|false)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.jx",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.jx",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.jx",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.jx",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.long.jx",
          "match": "\\b\\d+[lL]\\b"
        },
        {
          "name": "constant.numeric.float.jx",
          "match": "\\b\\d*\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.jx",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "this-calls": {
      "patterns": [
        {
          "name": "support.function.jx",
          "match": "\\bthis\\.(initRecord|addScope|addSignal|open|close|getWriter)\\b"
        }
      ]
    },
    "method-calls": {
      "patterns": [
        {
          "name": "support.function.jx",
          "match": "\\b(writeInt|writeDoubleArray|createMembers|createMember|createDoubleArray|setMember|setValue|setStringValue|write)\\b"
        },
        {
          "name": "support.function.math.jx",
          "match": "\\bMath\\.(sin|cos|tan|sqrt|abs|max|min|random)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.jx",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.jx",
          "match": "="
        },
        {
          "name": "keyword.operator.comparison.jx",
          "match": "(==|!=|<|>|<=|>=)"
        },
        {
          "name": "keyword.operator.arithmetic.jx",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.logical.jx",
          "match": "(&&|\\|\\||!)"
        }
      ]
    }
  }
}